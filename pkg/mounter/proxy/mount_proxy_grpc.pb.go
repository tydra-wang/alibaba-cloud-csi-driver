// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: pkg/mounter/proxy/mount_proxy.proto

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MountProxyClient is the client API for MountProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MountProxyClient interface {
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error)
}

type mountProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewMountProxyClient(cc grpc.ClientConnInterface) MountProxyClient {
	return &mountProxyClient{cc}
}

func (c *mountProxyClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error) {
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, "/MountProxy/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MountProxyServer is the server API for MountProxy service.
// All implementations must embed UnimplementedMountProxyServer
// for forward compatibility
type MountProxyServer interface {
	Mount(context.Context, *MountRequest) (*MountResponse, error)
	mustEmbedUnimplementedMountProxyServer()
}

// UnimplementedMountProxyServer must be embedded to have forward compatible implementations.
type UnimplementedMountProxyServer struct {
}

func (UnimplementedMountProxyServer) Mount(context.Context, *MountRequest) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedMountProxyServer) mustEmbedUnimplementedMountProxyServer() {}

// UnsafeMountProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MountProxyServer will
// result in compilation errors.
type UnsafeMountProxyServer interface {
	mustEmbedUnimplementedMountProxyServer()
}

func RegisterMountProxyServer(s grpc.ServiceRegistrar, srv MountProxyServer) {
	s.RegisterService(&MountProxy_ServiceDesc, srv)
}

func _MountProxy_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MountProxyServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MountProxy/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MountProxyServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MountProxy_ServiceDesc is the grpc.ServiceDesc for MountProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MountProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MountProxy",
	HandlerType: (*MountProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mount",
			Handler:    _MountProxy_Mount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/mounter/proxy/mount_proxy.proto",
}
